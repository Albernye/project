| Phase                           | Tâches clés                                                                                      |
| ------------------------------- | ------------------------------------------------------------------------------------------------ |
| **A. Mobile & collecte native** | • Développer une app React Native ou Flutter pour capter Wi‑Fi, BLE, baro, magnéto, gyro, accél. |
|                                 | • Envoyer en HTTPS vers `/collect_sensor_data`                                                   |
| **B. Routage dynamique**        | • Créer endpoint `/route?from=XXX&to=YYY` dans Flask                                             |
|                                 | • Utiliser `pgr_dijkstra` et renvoyer GeoJSON à l’app                                            |
| **C. Tracking utilisateur**     | • Intégrer PDR en temps réel dans l’app (magnéto+accéléro)                                       |
|                                 | • Afficher la position en surimpression sur la carte (Leaflet/OpenLayers)                        |
| **D. Fusion & correction**      | • À chaque dérive > 2 m, déclencher fingerprinting Wi‑Fi pour recalage                           |
|                                 | • Proposer un scan QR pour confirmer la position                                                 |
| **E. Déploiement**              | • Container Docker + CI/CD (GitHub Actions)                                                      |
|                                 | • Hébergement de l’API (Heroku, Railway, VM universitaire)                                       |
|                                 | • HTTPS & configuration DNS                                                                      |
| **F. Monitoring & feedback**    | • Dashboard d’usage (nombre de scans, taux de localisation OK)                                   |
|                                 | • Alerts si trop de dérive ou échecs fréquents                                                   |
| **G. Documentation**            | • Rédiger un guide utilisateur pour l’app                                                        |

Prochaines étapes immédiates pour l'OS

    App native simplifiée : prototype React Native + Expo

    Endpoint /route : vérifier que PGRouting renvoie le bon chemin

    Intégration PDR offline : script Python pour simuler sur CSV

    Fusion kNN & PDR : appeler fingerprint si éloigné de la route

    UI mobile/web : afficher carte, position et itinéraire

    ------------------------------------------------------------------------------------------------

Tâches POC restantes

    Tester en conditions réelles

        Scanner un QR dans le bâtiment test pour valider le passage /location.

        Vérifier que l’URL fonctionne sur ton téléphone. HAVE TO GO TO THE BUILDING

    Structurer l’import des enregistrements ✅✅

        Plutôt que d’inscrire tout dans un seul sensor_data.json, créer un dossier data/raw/door_<room>/recording_<i>.json ou CSV.

        Adapter collect_sensor_data() pour qu’il génère automatiquement ces sous‑dossiers et fichiers.

    Automatiser le routage QGIS depuis Python✅

        Créer un script (ou endpoint) qui exécute pgr_dijkstra et écrit un GeoJSON ou un shapefile.

        Charger ce GeoJSON dans QGIS depuis ton projet Python (ex : via un bouton “Export route”).
    
    Transformer les données PDR en CSV

        Écrire un script qui prend les enregistrements JSON et les convertit en CSV avec les colonnes : timestamp, x, y, z, orientation.

        Ajouter une colonne pour la salle si disponible (ex : “201”).

    Relier PDR offline à la géolocalisation ✅

        Écrire un module qui, pour chaque parcours CSV, calcule la trace PDR et la compare à la route de référence.

        Visualiser dans QGIS la trace PDR vs. la ligne centrale.

    Activer le Wi‑Fi fingerprinting ✅

        Lors de la collecte native (app ou Sensor App), inclure un scan Wi‑Fi pour récupérer ssid et rssi.

        Adapter geolocate.py pour agréger et comparer les RSSI (moyenne+écart‑type) dans le kNN.

    Implémenter la fusion PDR ↔ fingerprint

        En simulation, faire dériver la trace PDR volontairement, détecter un écart > 2 m et re‑localiser par kNN Wi‑Fi.

        Ajouter un scénario de “nouveau scan QR” pour actualiser la position de référence.